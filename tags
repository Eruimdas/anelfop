!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/bo/Downloads/anelfop/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220911.0/
ANELFOP	README.md	/^# ANELFOP$/;"	c
LOW_MEM	anelfop/wrappers/wrapper_UMAP.py	/^LOW_MEM = False$/;"	v
POSITIONAL=	expt_scripts/wrt_active_conf.sh	/^POSITIONAL=()$/;"	f
POSITIONAL=	expt_scripts/wrt_passive_conf.sh	/^POSITIONAL=()$/;"	f
X_test	anelfop/al_experiment.py	/^X_test = crf_.sent2features($/;"	v
X_test	anelfop/pl_experiment.py	/^X_test = crf_.sent2features($/;"	v
X_test_	anelfop/al_experiment.py	/^        X_test_ = crf_.sent2features($/;"	v
X_train	anelfop/pl_experiment.py	/^X_train = crf_.sent2features($/;"	v
Xi_pool	anelfop/al_experiment.py	/^    Xi_pool = crf_.sent2features($/;"	v
Xi_pool_	anelfop/al_experiment.py	/^        Xi_pool_ = crf_.sent2features($/;"	v
Xi_train	anelfop/al_experiment.py	/^    Xi_train = crf_.sent2features($/;"	v
Xi_train	anelfop/al_experiment.py	/^Xi_train = crf_.sent2features($/;"	v
_	anelfop/ss_clustering.py	/^embeddings_train, _ = functions.reduce_embeddings(cfg, embeddings_train, [[]])$/;"	v
active_learner	anelfop/al_experiment.py	/^active_learner = cfg["method"]$/;"	v
args	anelfop/al_experiment.py	/^args = parser.parse_args()$/;"	v
args	anelfop/pl_experiment.py	/^args = parser.parse_args()$/;"	v
args	anelfop/ss_clustering.py	/^args = parser.parse_args()$/;"	v
c_ann_flatten	anelfop/ss_clustering.py	/^c_ann_flatten = []$/;"	v
cfg	anelfop/al_experiment.py	/^cfg = load_save.load_config_from(config_path)$/;"	v
cfg	anelfop/pl_experiment.py	/^cfg = load_save.load_config_from(config_path, AL=False)$/;"	v
cfg	anelfop/ss_clustering.py	/^cfg = load_save.load_config_from(config_path)$/;"	v
cfg_from_file	anelfop/load_save.py	/^def cfg_from_file(filename):$/;"	f
config_path	anelfop/al_experiment.py	/^config_path = args.config_path$/;"	v
config_path	anelfop/pl_experiment.py	/^config_path = args.config_path$/;"	v
config_path	anelfop/ss_clustering.py	/^config_path = args.config_path$/;"	v
crf_	anelfop/al_experiment.py	/^import wrappers.wrapper_CRF as crf_$/;"	I	nameref:module:wrappers.wrapper_CRF
crf_	anelfop/pl_experiment.py	/^import wrappers.wrapper_CRF as crf_$/;"	I	nameref:module:wrappers.wrapper_CRF
crf_tagger	anelfop/al_experiment.py	/^    crf_tagger = crf_trained.tagger_$/;"	v
crf_trained	anelfop/al_experiment.py	/^    crf_trained = crf_.train_crf(cfg, Xi_train, y_ann)$/;"	v
crf_trained	anelfop/al_experiment.py	/^crf_trained = crf_.train_crf(cfg, Xi_train, y_ann)$/;"	v
crf_trained	anelfop/pl_experiment.py	/^crf_trained = crf_.train_crf(cfg, X_train, y_train)$/;"	v
dnorm_positive_assignment_probability	anelfop/al_methods.py	/^def dnorm_positive_assignment_probability($/;"	f
dnorm_positive_token_entropy	anelfop/al_methods.py	/^def dnorm_positive_token_entropy($/;"	f
dnorm_positive_token_margin	anelfop/al_methods.py	/^def dnorm_positive_token_margin($/;"	f
dnorm_positive_token_probability	anelfop/al_methods.py	/^def dnorm_positive_token_probability($/;"	f
embedding_dim	anelfop/al_experiment.py	/^embedding_dim = embeddings_train_r[0][0].shape[0]$/;"	v
embedding_dim	anelfop/pl_experiment.py	/^embedding_dim = embeddings_train_r[0][0].shape[0]$/;"	v
embeddings_ann	anelfop/ss_clustering.py	/^embeddings_ann = [embeddings_train[i] for i in idx_labeled]$/;"	v
embeddings_ann_flatten	anelfop/ss_clustering.py	/^embeddings_ann_flatten = []$/;"	v
embeddings_ann_i	anelfop/al_experiment.py	/^    embeddings_ann_i = [embeddings_train_r[x] for x in idx_ann]$/;"	v
embeddings_ann_i	anelfop/al_experiment.py	/^embeddings_ann_i = [embeddings_train_r[x] for x in idx_ann]$/;"	v
embeddings_pool	anelfop/ss_clustering.py	/^embeddings_pool = [embeddings_train[i] for i in idx_unlabeled]$/;"	v
embeddings_pool_i	anelfop/al_experiment.py	/^    embeddings_pool_i = [embeddings_train_r[x] for x in idx_pool]$/;"	v
embeddings_test_r	anelfop/al_experiment.py	/^embeddings_train_r, embeddings_test_r = functions.reduce_embeddings($/;"	v
embeddings_test_r	anelfop/pl_experiment.py	/^embeddings_train_r, embeddings_test_r = functions.reduce_embeddings($/;"	v
embeddings_train	anelfop/ss_clustering.py	/^embeddings_train, _ = functions.reduce_embeddings(cfg, embeddings_train, [[]])$/;"	v
embeddings_train_r	anelfop/al_experiment.py	/^embeddings_train_r, embeddings_test_r = functions.reduce_embeddings($/;"	v
embeddings_train_r	anelfop/pl_experiment.py	/^embeddings_train_r, embeddings_test_r = functions.reduce_embeddings($/;"	v
end	anelfop/al_experiment.py	/^    end = money.time()$/;"	v
end	anelfop/al_experiment.py	/^end = money.time()$/;"	v
end	anelfop/pl_experiment.py	/^end = money.time()$/;"	v
end_training	anelfop/al_experiment.py	/^    end_training = money.time()$/;"	v
end_training	anelfop/al_experiment.py	/^end_training = money.time()$/;"	v
f1_scores	anelfop/al_experiment.py	/^f1_scores = []$/;"	v
feature_cfg	anelfop/al_experiment.py	/^feature_cfg = load_save.load_ft_config(cfg)$/;"	v
feature_cfg	anelfop/pl_experiment.py	/^feature_cfg = load_save.load_ft_config(cfg)$/;"	v
feature_selector	anelfop/wrappers/wrapper_CRF.py	/^def feature_selector($/;"	f
fit_distribution	anelfop/al_methods.py	/^def fit_distribution(lengths):$/;"	f
get_batch_size	anelfop/functions.py	/^def get_batch_size(cfg, iteration, pool_sent, total_num_sent):$/;"	f
get_dnorm_val	anelfop/al_methods.py	/^def get_dnorm_val(dens, len_sent):$/;"	f
get_embeddings	anelfop/wrappers/wrapper_pretrained.py	/^def get_embeddings(cfg, tknzd_sent, tags, pos, part="train"):$/;"	f
get_init_size	anelfop/functions.py	/^def get_init_size(cfg, total_num_sent):$/;"	f
get_mask	anelfop/al_methods.py	/^    def get_mask(scores, mask_quantile):$/;"	f	function:get_outlier_mask	file:
get_outlier_mask	anelfop/al_methods.py	/^def get_outlier_mask(cfg, clusterer, embeddings_ann, embeddings_pool, sent_idx_pool):$/;"	f
idx_ann	anelfop/al_experiment.py	/^    idx_ann = idx_ann + idx_q$/;"	v
idx_ann	anelfop/al_experiment.py	/^idx_ann = initial_idx_ann$/;"	v
idx_labeled	anelfop/ss_clustering.py	/^idx_labeled = random.sample($/;"	v
idx_pool	anelfop/al_experiment.py	/^    idx_q, idx_pool = functions.query($/;"	v
idx_pool	anelfop/al_experiment.py	/^idx_pool = list($/;"	v
idx_q	anelfop/al_experiment.py	/^    idx_q, idx_pool = functions.query($/;"	v
idx_unlabeled	anelfop/ss_clustering.py	/^idx_unlabeled = [i for i in range(num_sentences) if i not in idx_labeled]$/;"	v
initial_idx_ann	anelfop/al_experiment.py	/^initial_idx_ann = random.sample($/;"	v
initial_size	anelfop/al_experiment.py	/^initial_size = functions.get_init_size(cfg, len(y_train))$/;"	v
iteration	anelfop/al_experiment.py	/^    iteration = iteration + 1$/;"	v
iteration	anelfop/al_experiment.py	/^iteration = 1$/;"	v
kwargs	anelfop/al_experiment.py	/^    kwargs = {}$/;"	v
kwargs	anelfop/ss_clustering.py	/^kwargs = {**cfg["umap_al"], **cfg["hdbscan_al"]}$/;"	v
labeled_percentage	anelfop/ss_clustering.py	/^labeled_percentage = 0$/;"	v
labeled_percentage	anelfop/ss_clustering.py	/^labeled_percentage = args.labeled_percentage$/;"	v
len_sent	anelfop/ss_clustering.py	/^    len_sent = len(embeddings_ann[i])$/;"	v
len_sent	anelfop/ss_clustering.py	/^    len_sent = len(embeddings_pool[i])$/;"	v
load_config_from	anelfop/load_save.py	/^def load_config_from(filename=".\/config.yaml", AL=True):$/;"	f
load_crf_model	anelfop/load_save.py	/^def load_crf_model(cfg, iteration):$/;"	f
load_data	anelfop/load_save.py	/^def load_data(cfg):$/;"	f
load_ft_config	anelfop/load_save.py	/^def load_ft_config(cfg):$/;"	f
longest_sentence_selection	anelfop/al_methods.py	/^def longest_sentence_selection(sent_lenghts, idx_pool, batch_size):$/;"	f
mask_out	anelfop/ss_clustering.py	/^mask_out = np.zeros(len(clusterer.outlier_scores_[:]))$/;"	v
mask_out_ann	anelfop/ss_clustering.py	/^mask_out_ann = [$/;"	v
mask_out_ann	anelfop/ss_clustering.py	/^mask_out_ann = mask_out[: len(embeddings_ann)]$/;"	v
mask_out_pool	anelfop/ss_clustering.py	/^mask_out_pool = [$/;"	v
mask_out_pool	anelfop/ss_clustering.py	/^mask_out_pool = mask_out[len(embeddings_ann) :]$/;"	v
money	anelfop/al_experiment.py	/^import time as money$/;"	I	nameref:module:time
money	anelfop/pl_experiment.py	/^import time as money$/;"	I	nameref:module:time
n_ent	anelfop/ss_clustering.py	/^n_ent = max(count_clusters.items(), key=operator.itemgetter(1))[0]$/;"	v
normalized_assignment_probability	anelfop/al_methods.py	/^def normalized_assignment_probability(m_pool, y_pred, idx_pool, batch_size):$/;"	f
normalized_token_entropy	anelfop/al_methods.py	/^def normalized_token_entropy(m_pool, idx_pool, batch_size):$/;"	f
normalized_token_margin	anelfop/al_methods.py	/^def normalized_token_margin(m_pool, idx_pool, batch_size):$/;"	f
normalized_token_probability	anelfop/al_methods.py	/^def normalized_token_probability(m_pool, idx_pool, batch_size):$/;"	f
np	anelfop/al_experiment.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	anelfop/al_methods.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	anelfop/functions.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	anelfop/ss_clustering.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	anelfop/wrappers/wrapper_UMAP.py	/^import numpy as np$/;"	I	nameref:module:numpy
num_sentences	anelfop/ss_clustering.py	/^num_sentences = len(embeddings_train)$/;"	v
outliers	anelfop/ss_clustering.py	/^outliers = np.where(clusterer.outlier_scores_[:] > threshold)[0]$/;"	v
parser	anelfop/al_experiment.py	/^parser = argparse.ArgumentParser(prog="PROG")$/;"	v
parser	anelfop/pl_experiment.py	/^parser = argparse.ArgumentParser(prog="PROG")$/;"	v
parser	anelfop/ss_clustering.py	/^parser = argparse.ArgumentParser(prog="PROG")$/;"	v
pca_r_embeddings	anelfop/functions.py	/^def pca_r_embeddings(embeddings_ann, embeddings_pool, n_comp=200, seed=29):$/;"	f
pd	anelfop/al_methods.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	anelfop/ss_clustering.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pkl	anelfop/load_save.py	/^import pickle as pkl$/;"	I	nameref:module:pickle
pkl	anelfop/wrappers/wrapper_pretrained.py	/^import pickle as pkl$/;"	I	nameref:module:pickle
plot_umap_hdbscan	anelfop/al_methods.py	/^def plot_umap_hdbscan(clusters_pool, embeddings_pool, experiment_dir, y_ann):$/;"	f
plt	anelfop/al_methods.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
pos_ann_i	anelfop/al_experiment.py	/^    pos_ann_i = [pos_train[x] for x in idx_ann]$/;"	v
pos_ann_i	anelfop/al_experiment.py	/^pos_ann_i = [pos_train[x] for x in idx_ann]$/;"	v
pos_pool_i	anelfop/al_experiment.py	/^    pos_pool_i = [pos_train[x] for x in idx_pool]$/;"	v
positive_annotation_selection	anelfop/al_methods.py	/^def positive_annotation_selection($/;"	f
pretrained_	anelfop/al_experiment.py	/^import wrappers.wrapper_pretrained as pretrained_$/;"	I	nameref:module:wrappers.wrapper_pretrained
pretrained_	anelfop/pl_experiment.py	/^import wrappers.wrapper_pretrained as pretrained_$/;"	I	nameref:module:wrappers.wrapper_pretrained
pretrained_	anelfop/ss_clustering.py	/^import wrappers.wrapper_pretrained as pretrained_$/;"	I	nameref:module:wrappers.wrapper_pretrained
queried_indexes	anelfop/al_experiment.py	/^queried_indexes = []$/;"	v
queried_sent_len	anelfop/al_experiment.py	/^queried_sent_len = []$/;"	v
query	anelfop/functions.py	/^def query($/;"	f
random_seed	anelfop/al_experiment.py	/^random_seed = cfg["seed"]$/;"	v
random_seed	anelfop/pl_experiment.py	/^random_seed = cfg["seed"]$/;"	v
random_seed	anelfop/ss_clustering.py	/^random_seed = cfg["seed"]$/;"	v
random_selection	anelfop/al_methods.py	/^def random_selection(idx_pool, batch_size, seed):$/;"	f
reduce_embeddings	anelfop/functions.py	/^def reduce_embeddings(cfg, embeddings_train, embeddings_test):$/;"	f
report	anelfop/al_experiment.py	/^    report = classification_report(y_test, yi_pred)$/;"	v
report	anelfop/al_experiment.py	/^report = classification_report(y_test, yi_pred)$/;"	v
report	anelfop/pl_experiment.py	/^report = classification_report(y_test, y_pred)$/;"	v
report	anelfop/ss_clustering.py	/^report = classification_report(y_true, y_pred)$/;"	v
save_crf_model	anelfop/load_save.py	/^def save_crf_model(cfg, model, iteration):$/;"	f
save_results	anelfop/load_save.py	/^def save_results(cfg, stats_query, f1_scores, query_indexes, query_sent_len):$/;"	f
sent2dict_list	anelfop/wrappers/wrapper_CRF.py	/^def sent2dict_list(feature_cfg, sents, i, **kwargs):$/;"	f
sent2features	anelfop/wrappers/wrapper_CRF.py	/^def sent2features(feature_cfg, sents, generator=False, **kwargs):$/;"	f
sent_idx_ann	anelfop/ss_clustering.py	/^sent_idx_ann = list(accumulate(sent_len_ann))$/;"	v
sent_idx_pool	anelfop/ss_clustering.py	/^sent_idx_pool = list(accumulate(sent_len_pool))$/;"	v
sent_len_ann	anelfop/ss_clustering.py	/^sent_len_ann = [0] + [len(sent) for sent in embeddings_ann]$/;"	v
sent_len_pool	anelfop/ss_clustering.py	/^sent_len_pool = [0] + [len(sent) for sent in embeddings_pool]$/;"	v
sents_ann_i	anelfop/al_experiment.py	/^    sents_ann_i = [tknzd_sent_train[x] for x in idx_ann]$/;"	v
sents_ann_i	anelfop/al_experiment.py	/^sents_ann_i = [tknzd_sent_train[x] for x in idx_ann]$/;"	v
sents_pool_i	anelfop/al_experiment.py	/^    sents_pool_i = [tknzd_sent_train[x] for x in idx_pool]$/;"	v
single_assignment_probability	anelfop/al_methods.py	/^def single_assignment_probability(m_pool, y_pred, idx_pool, batch_size):$/;"	f
single_token_entropy	anelfop/al_methods.py	/^def single_token_entropy(m_pool, idx_pool, batch_size):$/;"	f
single_token_margin	anelfop/al_methods.py	/^def single_token_margin(m_pool, idx_pool, batch_size):$/;"	f
single_token_probability	anelfop/al_methods.py	/^def single_token_probability(m_pool, idx_pool, batch_size):$/;"	f
sm	anelfop/al_methods.py	/^import statsmodels.api as sm$/;"	I	nameref:module:statsmodels.api
ss_umap_r_embeddings	anelfop/wrappers/wrapper_UMAP.py	/^def ss_umap_r_embeddings($/;"	f
ss_umap_r_hdbscan_c	anelfop/wrappers/wrapper_UMAP.py	/^def ss_umap_r_hdbscan_c($/;"	f
start	anelfop/al_experiment.py	/^    start = money.time()$/;"	v
start	anelfop/al_experiment.py	/^start = money.time()$/;"	v
start	anelfop/pl_experiment.py	/^start = money.time()$/;"	v
start_training	anelfop/al_experiment.py	/^    start_training = money.time()$/;"	v
start_training	anelfop/al_experiment.py	/^start_training = money.time()$/;"	v
stats_queries	anelfop/al_experiment.py	/^stats_queries = []$/;"	v
stop_condition	anelfop/al_experiment.py	/^    stop_condition = functions.stopping_criteria($/;"	v
stop_condition	anelfop/al_experiment.py	/^stop_condition = functions.stopping_criteria($/;"	v
stopping_criteria	anelfop/functions.py	/^def stopping_criteria(cfg, iteration, pool_sent, total_num_sent, f1):$/;"	f
tag2labels	anelfop/wrappers/wrapper_CRF.py	/^def tag2labels(tags, generator=False):$/;"	f
tag_dict	anelfop/ss_clustering.py	/^tag_dict = cfg["tag_dict"]$/;"	v
threshold	anelfop/ss_clustering.py	/^threshold = pd.Series(clusterer.outlier_scores_[:]).quantile($/;"	v
total_assignemnt_probability	anelfop/al_methods.py	/^def total_assignemnt_probability(m_pool, y_pred, idx_pool, batch_size):$/;"	f
total_positive_assignment_probability	anelfop/al_methods.py	/^def total_positive_assignment_probability($/;"	f
total_positive_token_entropy	anelfop/al_methods.py	/^def total_positive_token_entropy($/;"	f
total_positive_token_margin	anelfop/al_methods.py	/^def total_positive_token_margin($/;"	f
total_positive_token_probability	anelfop/al_methods.py	/^def total_positive_token_probability($/;"	f
total_token_entropy	anelfop/al_methods.py	/^def total_token_entropy(m_pool, idx_pool, batch_size):$/;"	f
total_token_margin	anelfop/al_methods.py	/^def total_token_margin(m_pool, idx_pool, batch_size):$/;"	f
total_token_probability	anelfop/al_methods.py	/^def total_token_probability(m_pool, idx_pool, batch_size):$/;"	f
train_crf	anelfop/wrappers/wrapper_CRF.py	/^def train_crf(cfg, X_train, y_train):$/;"	f
umap_	anelfop/al_methods.py	/^import wrappers.wrapper_UMAP as umap_$/;"	I	nameref:module:wrappers.wrapper_UMAP
umap_	anelfop/functions.py	/^import wrappers.wrapper_UMAP as umap_$/;"	I	nameref:module:wrappers.wrapper_UMAP
umap_	anelfop/ss_clustering.py	/^import wrappers.wrapper_UMAP as umap_$/;"	I	nameref:module:wrappers.wrapper_UMAP
umap_r_embeddings	anelfop/wrappers/wrapper_UMAP.py	/^def umap_r_embeddings($/;"	f
word2features	anelfop/wrappers/wrapper_CRF.py	/^def word2features(feature_cfg, sents, i, j, **kwargs):$/;"	f
write_ft_config	anelfop/load_save.py	/^def write_ft_config(cfg):$/;"	f
y_ann	anelfop/al_experiment.py	/^    y_ann = [y_train[x] for x in idx_ann]$/;"	v
y_ann	anelfop/al_experiment.py	/^y_ann = [y_train[x] for x in idx_ann]$/;"	v
y_ann	anelfop/ss_clustering.py	/^y_ann = [y_train[i] for i in idx_labeled]$/;"	v
y_pool	anelfop/ss_clustering.py	/^y_pool = [y_train[i] for i in idx_unlabeled]$/;"	v
y_pred	anelfop/pl_experiment.py	/^y_pred = crf_trained.predict(X_test)$/;"	v
y_pred	anelfop/ss_clustering.py	/^y_pred = []$/;"	v
y_true	anelfop/ss_clustering.py	/^y_true = []$/;"	v
yi_pred	anelfop/al_experiment.py	/^    yi_pred = crf_trained.predict(X_test_)$/;"	v
yi_pred	anelfop/al_experiment.py	/^yi_pred = crf_trained.predict(X_test)$/;"	v
